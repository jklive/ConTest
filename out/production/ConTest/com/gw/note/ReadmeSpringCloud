--------》微服务

---》微服务的定义：
微服务将传统的一站式应用，按照业务划分为一组服务，这些服务应该跑在不同的进程上，拥有自己独立的数据库

每一个微服务，都拥有自己独立的功能,处理不同的业务，能够单独启动和销毁，服务之间可以协调通信

Dubbo  服务之间的通信是基于RPC(远程过程调用)
SpringCloud  服务之间的通信是基于REST

---》微服务与微服务架构

微服务强调的是一个一个的个体，专业的个体做专业的事情，例如众筹项目中有用户模块，订单模块，支付模块。。。

微服务架构强调的是一群微服务模块构成的一个整体，对内分为很多微服务模块，对外暴露一个整体公共的服务
例如众筹项目对外暴露提供众筹服务，对内分为很多微服务模块

---》微服务优缺点：

--》优点
微服务降低的项目的耦合度，能聚焦一个指定的业务功能和需求，出现问题只需要修改该部分的代码
微服务只是业务逻辑的代码，不会和html，css或其他组件耦合
每个微服务可以有自己的数据库，也就可以共用数据库，数据独立性和共享性较好

--》缺点
多个微服务之间数量庞大后的通信问题，数据一致性，随着服务的增加且，运维难度也在增加，系统集成测试

---》微服务技术栈 即多种技术的集合体

？一个分布式的微服务架构，需要有哪些维度？
例如  服务治理、服务注册、服务调用、服务通信、服务监控、负载均衡。。。
这些，SpringCloud给你提供一条龙服务。就像小米家电，小米家居，小米手机，都是一家公司小米科技

一个分布式的微服务架构，需要哪些技术维度，每一个维度有需要那些技术具体落地实现，这就是微服务技术栈

例如-----

服务开发：                  Spring、SpringMVC、SpringBoot、。。

服务的注册与发现(注册中心)：  Eureka、zookeeper、。。。

服务之间的调用（服务通信）：  RPC(远程过程调用)、REST

服务熔断器：                 Envoy、 Hystrix

服务的负载均衡：             Ribbon、Nginx

服务接口调用：               Forgn..

---》SpringCLoud做微服务架构

SpringCloud是基于SpringBoot的一套微服务解决方案，包括服务注册与发现，服务通信，服务熔断，负载均衡
服务监控，等组件，是一套整合的微服务技术栈，
SpringCloud利用SpringBoot巧妙的简化了分布式系统基础设施的开发，给开发者留出了一套简单易懂的，易部署
易维护的分布式开发工具包

SpringCloud是微服务架构下的一站式解决方案，是各个微服务架构落地技术的集合体，俗称微服务全家桶

---》SpringBoot和SpringCloud 的关系
SpringBoot是框架中的框架，偏微观，专注于快速方便的开发单个微服务的框架

SpringCloud是微服务架构的一站式解决方案，是宏观角度，将SpringBoot开发的一个个单体微服务合并加管理
为各个微服务之间提供的一整套服务，服务注册与发现，配置管理，服务负载均衡，服务熔断，服务之间的通信等。。。
SpringBoot可以离开SpringCloud单体开发，SpringCloud是建立在SpringBoot之上的

---》注册中心Eureka 自我保护机制
某时刻某一个微服务不可用了，Eureka不会立即清理，依旧会对该服务的信息进行保存

即默认情况下，如果Eureka一段时间内没有接受到来自某个微服务的心跳，默认90s，也不应该立即注销该微服务
，而是保存该微服务的数据，网络故障结束后，Eureka自动退出自我保护模式（心跳重新恢复阈值以上）
这个机制可以让Eureka集群更加健壮稳定

---》springCloud Ribbon是基于客户端的处理负载均衡的工具

主要功能是提供客户端的软件负载均衡算法，哪个服务器空闲将请求交给哪个服务器处理，让各个服务器之间负载均衡
Ribbon其实就是一个负载均衡的客户端组件

---》Ribbon的核心组件iRule
iRule可以根据特定的算法从服务列表中选取下一个要访问的服务
Ribbon提供了多种策略，随机，轮询，根据响应时间加权
Ribbon在工作中分成两步，第一步先选择Eurekaserver在这个时间段负载较少的Server
再根据用户指定的策略，在server服务注册列表中，选取一个地址


---》微服务化

微服务化的核心，就是将传统的一站式应用，根据业务拆分为一个一个的服务，每一个微服务提供单个业务功能的服务
专业的微服务做专业的事，彼此独立，可以单独启动销毁，可以共享也可以拥有自己独立的数据库

---》feign是一个声明式的WEB服务客户端，只需要创建一个接口，在上面添加注释即可

之前大家用Ribbon进行负载均衡，功能很强大，甚至可以自定义算法

feign是另一种负载均衡的方式，面向接口调用微服务，实际中使用较多

---》服务雪崩

如果微服务A调用的微服务B和微服务C，微服务B,C有各自调用了e..其他一些微服务，这时候，如果E服务器down机，
或响应时间长或不可用，对微服务A的调用就一直等待，会占用越来越多的系统资源，进而引起系统崩溃，即
服务器雪崩


---》Hystrix 断路器

主要负责在Springcloud里面做服务熔断，服务降级处理
Hystrix是一个用于处理分布式系统的延迟和容错的开源库
在分布式系统里，许多依赖会不可避免的调用失败，比如超时，异常，等等，那么Hystrix就可以保证在某一个依赖出问题
的情况下，不会导致整体服务的失败，避免了级联服务故障，提高了分布式系统的弹性和容错率。

“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控，（类似熔断保险丝）
向调用方返回一个默认结果，而不是让服务器长时间的等待抛出异常，这样就保证的服务调用方的线程不会长时间的
等待或者被占用，避免故障在分布式系统之中蔓延，导致服务器雪崩

---》服务熔断
熔断机制，是应对服务雪崩效应的微服务链路保护机制
当扇出链路的某个微服务响应时间过长或不可用时，会进行服务的降级，进而熔断对该服务的调用，
快速返回默认的响应信息，当系统检测到该微服务节点正常之后，会恢复正常的调用链路，在Springcloud里
熔断机制通过Hystrix实现，Hystrix会监控微服务之间的调用情况，当失败的调用达到一定阈值，就会触发熔断机制


---》服务降级

一句话，整体资源快不够了忍痛割爱将某些资源关掉，等度过难关，再开启回来

---》服务熔断降级小总结
服务熔断，一般是某个服务故障或异常引起的，类似现实世界的保险丝，当某个异常条件被触发，直接熔断整个服务
，而不是一直等到此服务超时

---》服务监控 HystrixDashboard
除了熔断依赖服务的调用意外，Hystrix还提供的准时服务监控，他会持续的记录所有通过Hystrix发起的服务请求
即每秒执行多少请求，多少成功，多少失败等，可以以统计报表和图形的形式统计给用户看












